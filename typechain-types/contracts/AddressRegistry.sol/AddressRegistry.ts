/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AddressRegistryInterface extends utils.Interface {
  functions: {
    "ERC1155CollectionVaultVersion(address)": FunctionFragment;
    "ERC721CollectionVaultVersion(address)": FunctionFragment;
    "actionValidator()": FunctionFragment;
    "bundleMarketplace()": FunctionFragment;
    "implementedProposalAddress(address)": FunctionFragment;
    "isERC1155Enabled(address,uint256)": FunctionFragment;
    "isERC1155TokenDisabled(address,uint256)": FunctionFragment;
    "isTradeCollectionEnabled(address)": FunctionFragment;
    "marketplace()": FunctionFragment;
    "owner()": FunctionFragment;
    "promDao()": FunctionFragment;
    "proxyFactory()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyCollector()": FunctionFragment;
    "setActionValidator(address)": FunctionFragment;
    "setBundleMarketplace(address)": FunctionFragment;
    "setERC1155CollectionVaultVersion(address,uint256)": FunctionFragment;
    "setERC721CollectionVaultVersion(address,uint256)": FunctionFragment;
    "setIsERC1155TokenDisabled(address,uint256,bool)": FunctionFragment;
    "setIsTradeCollectionEnabled(address,bool)": FunctionFragment;
    "setMarketplace(address)": FunctionFragment;
    "setPromDao(address)": FunctionFragment;
    "setProposedRentalCollection(address,bool)": FunctionFragment;
    "setProposedTradeCollection(address,bool)": FunctionFragment;
    "setProxyFactory(address)": FunctionFragment;
    "setRoyaltyCollector(address)": FunctionFragment;
    "setTokenOracle(address,address)": FunctionFragment;
    "setTradeMarketplace(address)": FunctionFragment;
    "setTradeMarketplaceFeeReceiver(address)": FunctionFragment;
    "setVaultManager(address)": FunctionFragment;
    "tokenOracle(address)": FunctionFragment;
    "tradeMarketplace()": FunctionFragment;
    "tradeMarketplaceFeeReceiver()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vaultManager()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ERC1155CollectionVaultVersion"
      | "ERC721CollectionVaultVersion"
      | "actionValidator"
      | "bundleMarketplace"
      | "implementedProposalAddress"
      | "isERC1155Enabled"
      | "isERC1155TokenDisabled"
      | "isTradeCollectionEnabled"
      | "marketplace"
      | "owner"
      | "promDao"
      | "proxyFactory"
      | "renounceOwnership"
      | "royaltyCollector"
      | "setActionValidator"
      | "setBundleMarketplace"
      | "setERC1155CollectionVaultVersion"
      | "setERC721CollectionVaultVersion"
      | "setIsERC1155TokenDisabled"
      | "setIsTradeCollectionEnabled"
      | "setMarketplace"
      | "setPromDao"
      | "setProposedRentalCollection"
      | "setProposedTradeCollection"
      | "setProxyFactory"
      | "setRoyaltyCollector"
      | "setTokenOracle"
      | "setTradeMarketplace"
      | "setTradeMarketplaceFeeReceiver"
      | "setVaultManager"
      | "tokenOracle"
      | "tradeMarketplace"
      | "tradeMarketplaceFeeReceiver"
      | "transferOwnership"
      | "vaultManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ERC1155CollectionVaultVersion",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721CollectionVaultVersion",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "actionValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bundleMarketplace",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementedProposalAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isERC1155Enabled",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isERC1155TokenDisabled",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTradeCollectionEnabled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplace",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "promDao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxyFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setActionValidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBundleMarketplace",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setERC1155CollectionVaultVersion",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setERC721CollectionVaultVersion",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsERC1155TokenDisabled",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsTradeCollectionEnabled",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketplace",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPromDao",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposedRentalCollection",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposedTradeCollection",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProxyFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradeMarketplace",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradeMarketplaceFeeReceiver",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeMarketplace",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradeMarketplaceFeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC1155CollectionVaultVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721CollectionVaultVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "actionValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bundleMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementedProposalAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isERC1155Enabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isERC1155TokenDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTradeCollectionEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "promDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActionValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBundleMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setERC1155CollectionVaultVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setERC721CollectionVaultVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsERC1155TokenDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsTradeCollectionEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPromDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProposedRentalCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposedTradeCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProxyFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradeMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradeMarketplaceFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeMarketplaceFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultManager",
    data: BytesLike
  ): Result;

  events: {
    "ActionValidatorSet(address)": EventFragment;
    "ERC1155CollectionStatusChanged(address,uint256)": EventFragment;
    "ERC1155TokenStatusChanged(address,uint256,bool)": EventFragment;
    "ERC721CollectionStatusChanged(address,uint256)": EventFragment;
    "MarketplaceUpdated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PromDaoSet(address)": EventFragment;
    "ProxyFactoryUpdated(address)": EventFragment;
    "RoyaltyCollectorUpdated(address)": EventFragment;
    "TradeCollectionStatusChanged(address,bool)": EventFragment;
    "TradeMarketplaceFeeReceivereUpdated(address)": EventFragment;
    "TradeMarketplaceUpdated(address)": EventFragment;
    "VaultManagerUpdated(address)": EventFragment;
    "bundleMarketplaceUpdated(address)": EventFragment;
    "rentalProposalImplemented(address,address,bool)": EventFragment;
    "tradeProposalImplemented(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActionValidatorSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ERC1155CollectionStatusChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC1155TokenStatusChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ERC721CollectionStatusChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketplaceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PromDaoSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyFactoryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyCollectorUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TradeCollectionStatusChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TradeMarketplaceFeeReceivereUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeMarketplaceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultManagerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "bundleMarketplaceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "rentalProposalImplemented"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "tradeProposalImplemented"): EventFragment;
}

export interface ActionValidatorSetEventObject {
  newActionValidator: string;
}
export type ActionValidatorSetEvent = TypedEvent<
  [string],
  ActionValidatorSetEventObject
>;

export type ActionValidatorSetEventFilter =
  TypedEventFilter<ActionValidatorSetEvent>;

export interface ERC1155CollectionStatusChangedEventObject {
  collection: string;
  minimalVersion: BigNumber;
}
export type ERC1155CollectionStatusChangedEvent = TypedEvent<
  [string, BigNumber],
  ERC1155CollectionStatusChangedEventObject
>;

export type ERC1155CollectionStatusChangedEventFilter =
  TypedEventFilter<ERC1155CollectionStatusChangedEvent>;

export interface ERC1155TokenStatusChangedEventObject {
  collection: string;
  tokenId: BigNumber;
  status: boolean;
}
export type ERC1155TokenStatusChangedEvent = TypedEvent<
  [string, BigNumber, boolean],
  ERC1155TokenStatusChangedEventObject
>;

export type ERC1155TokenStatusChangedEventFilter =
  TypedEventFilter<ERC1155TokenStatusChangedEvent>;

export interface ERC721CollectionStatusChangedEventObject {
  collection: string;
  minimalVersion: BigNumber;
}
export type ERC721CollectionStatusChangedEvent = TypedEvent<
  [string, BigNumber],
  ERC721CollectionStatusChangedEventObject
>;

export type ERC721CollectionStatusChangedEventFilter =
  TypedEventFilter<ERC721CollectionStatusChangedEvent>;

export interface MarketplaceUpdatedEventObject {
  marketplace: string;
}
export type MarketplaceUpdatedEvent = TypedEvent<
  [string],
  MarketplaceUpdatedEventObject
>;

export type MarketplaceUpdatedEventFilter =
  TypedEventFilter<MarketplaceUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PromDaoSetEventObject {
  newPromDao: string;
}
export type PromDaoSetEvent = TypedEvent<[string], PromDaoSetEventObject>;

export type PromDaoSetEventFilter = TypedEventFilter<PromDaoSetEvent>;

export interface ProxyFactoryUpdatedEventObject {
  proxyFactory: string;
}
export type ProxyFactoryUpdatedEvent = TypedEvent<
  [string],
  ProxyFactoryUpdatedEventObject
>;

export type ProxyFactoryUpdatedEventFilter =
  TypedEventFilter<ProxyFactoryUpdatedEvent>;

export interface RoyaltyCollectorUpdatedEventObject {
  royaltyCollector: string;
}
export type RoyaltyCollectorUpdatedEvent = TypedEvent<
  [string],
  RoyaltyCollectorUpdatedEventObject
>;

export type RoyaltyCollectorUpdatedEventFilter =
  TypedEventFilter<RoyaltyCollectorUpdatedEvent>;

export interface TradeCollectionStatusChangedEventObject {
  collection: string;
  status: boolean;
}
export type TradeCollectionStatusChangedEvent = TypedEvent<
  [string, boolean],
  TradeCollectionStatusChangedEventObject
>;

export type TradeCollectionStatusChangedEventFilter =
  TypedEventFilter<TradeCollectionStatusChangedEvent>;

export interface TradeMarketplaceFeeReceivereUpdatedEventObject {
  TradeMarketplaceFeeReceivereUpdated: string;
}
export type TradeMarketplaceFeeReceivereUpdatedEvent = TypedEvent<
  [string],
  TradeMarketplaceFeeReceivereUpdatedEventObject
>;

export type TradeMarketplaceFeeReceivereUpdatedEventFilter =
  TypedEventFilter<TradeMarketplaceFeeReceivereUpdatedEvent>;

export interface TradeMarketplaceUpdatedEventObject {
  tradeMarketplace: string;
}
export type TradeMarketplaceUpdatedEvent = TypedEvent<
  [string],
  TradeMarketplaceUpdatedEventObject
>;

export type TradeMarketplaceUpdatedEventFilter =
  TypedEventFilter<TradeMarketplaceUpdatedEvent>;

export interface VaultManagerUpdatedEventObject {
  newVaultManager: string;
}
export type VaultManagerUpdatedEvent = TypedEvent<
  [string],
  VaultManagerUpdatedEventObject
>;

export type VaultManagerUpdatedEventFilter =
  TypedEventFilter<VaultManagerUpdatedEvent>;

export interface bundleMarketplaceUpdatedEventObject {
  bundleMarketplace: string;
}
export type bundleMarketplaceUpdatedEvent = TypedEvent<
  [string],
  bundleMarketplaceUpdatedEventObject
>;

export type bundleMarketplaceUpdatedEventFilter =
  TypedEventFilter<bundleMarketplaceUpdatedEvent>;

export interface rentalProposalImplementedEventObject {
  collection: string;
  actionValidator: string;
  status: boolean;
}
export type rentalProposalImplementedEvent = TypedEvent<
  [string, string, boolean],
  rentalProposalImplementedEventObject
>;

export type rentalProposalImplementedEventFilter =
  TypedEventFilter<rentalProposalImplementedEvent>;

export interface tradeProposalImplementedEventObject {
  collection: string;
  status: boolean;
}
export type tradeProposalImplementedEvent = TypedEvent<
  [string, boolean],
  tradeProposalImplementedEventObject
>;

export type tradeProposalImplementedEventFilter =
  TypedEventFilter<tradeProposalImplementedEvent>;

export interface AddressRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AddressRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC1155CollectionVaultVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ERC721CollectionVaultVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    actionValidator(overrides?: CallOverrides): Promise<[string]>;

    bundleMarketplace(overrides?: CallOverrides): Promise<[string]>;

    implementedProposalAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isERC1155Enabled(
      _erc1155: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isERC1155TokenDisabled(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTradeCollectionEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marketplace(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    promDao(overrides?: CallOverrides): Promise<[string]>;

    proxyFactory(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royaltyCollector(overrides?: CallOverrides): Promise<[string]>;

    setActionValidator(
      _actionValidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBundleMarketplace(
      _bundleMarketplace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setERC1155CollectionVaultVersion(
      _erc1155: PromiseOrValue<string>,
      _minimalVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setERC721CollectionVaultVersion(
      _erc721: PromiseOrValue<string>,
      _minimalVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsERC1155TokenDisabled(
      _erc1155: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsTradeCollectionEnabled(
      _collectionAddress: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketplace(
      _newMarketplace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPromDao(
      _newPromDao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProposedRentalCollection(
      _rentalCollection: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProposedTradeCollection(
      _tradeCollection: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProxyFactory(
      _newProxyFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoyaltyCollector(
      _newRoyaltyCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTokenOracle(
      _token: PromiseOrValue<string>,
      _oracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTradeMarketplace(
      _tradeMarketplace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTradeMarketplaceFeeReceiver(
      _tradeMarketplaceFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVaultManager(
      _newVaultManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenOracle(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tradeMarketplace(overrides?: CallOverrides): Promise<[string]>;

    tradeMarketplaceFeeReceiver(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vaultManager(overrides?: CallOverrides): Promise<[string]>;
  };

  ERC1155CollectionVaultVersion(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ERC721CollectionVaultVersion(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  actionValidator(overrides?: CallOverrides): Promise<string>;

  bundleMarketplace(overrides?: CallOverrides): Promise<string>;

  implementedProposalAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isERC1155Enabled(
    _erc1155: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isERC1155TokenDisabled(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTradeCollectionEnabled(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketplace(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  promDao(overrides?: CallOverrides): Promise<string>;

  proxyFactory(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royaltyCollector(overrides?: CallOverrides): Promise<string>;

  setActionValidator(
    _actionValidator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBundleMarketplace(
    _bundleMarketplace: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setERC1155CollectionVaultVersion(
    _erc1155: PromiseOrValue<string>,
    _minimalVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setERC721CollectionVaultVersion(
    _erc721: PromiseOrValue<string>,
    _minimalVersion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsERC1155TokenDisabled(
    _erc1155: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsTradeCollectionEnabled(
    _collectionAddress: PromiseOrValue<string>,
    _status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketplace(
    _newMarketplace: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPromDao(
    _newPromDao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProposedRentalCollection(
    _rentalCollection: PromiseOrValue<string>,
    _isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProposedTradeCollection(
    _tradeCollection: PromiseOrValue<string>,
    _isEnabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProxyFactory(
    _newProxyFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoyaltyCollector(
    _newRoyaltyCollector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTokenOracle(
    _token: PromiseOrValue<string>,
    _oracleAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTradeMarketplace(
    _tradeMarketplace: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTradeMarketplaceFeeReceiver(
    _tradeMarketplaceFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVaultManager(
    _newVaultManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenOracle(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  tradeMarketplace(overrides?: CallOverrides): Promise<string>;

  tradeMarketplaceFeeReceiver(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vaultManager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ERC1155CollectionVaultVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ERC721CollectionVaultVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    actionValidator(overrides?: CallOverrides): Promise<string>;

    bundleMarketplace(overrides?: CallOverrides): Promise<string>;

    implementedProposalAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isERC1155Enabled(
      _erc1155: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isERC1155TokenDisabled(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTradeCollectionEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketplace(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    promDao(overrides?: CallOverrides): Promise<string>;

    proxyFactory(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyCollector(overrides?: CallOverrides): Promise<string>;

    setActionValidator(
      _actionValidator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBundleMarketplace(
      _bundleMarketplace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setERC1155CollectionVaultVersion(
      _erc1155: PromiseOrValue<string>,
      _minimalVersion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setERC721CollectionVaultVersion(
      _erc721: PromiseOrValue<string>,
      _minimalVersion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsERC1155TokenDisabled(
      _erc1155: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsTradeCollectionEnabled(
      _collectionAddress: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketplace(
      _newMarketplace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPromDao(
      _newPromDao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposedRentalCollection(
      _rentalCollection: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposedTradeCollection(
      _tradeCollection: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProxyFactory(
      _newProxyFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltyCollector(
      _newRoyaltyCollector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenOracle(
      _token: PromiseOrValue<string>,
      _oracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTradeMarketplace(
      _tradeMarketplace: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTradeMarketplaceFeeReceiver(
      _tradeMarketplaceFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultManager(
      _newVaultManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenOracle(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    tradeMarketplace(overrides?: CallOverrides): Promise<string>;

    tradeMarketplaceFeeReceiver(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultManager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ActionValidatorSet(address)"(
      newActionValidator?: null
    ): ActionValidatorSetEventFilter;
    ActionValidatorSet(
      newActionValidator?: null
    ): ActionValidatorSetEventFilter;

    "ERC1155CollectionStatusChanged(address,uint256)"(
      collection?: null,
      minimalVersion?: null
    ): ERC1155CollectionStatusChangedEventFilter;
    ERC1155CollectionStatusChanged(
      collection?: null,
      minimalVersion?: null
    ): ERC1155CollectionStatusChangedEventFilter;

    "ERC1155TokenStatusChanged(address,uint256,bool)"(
      collection?: null,
      tokenId?: null,
      status?: null
    ): ERC1155TokenStatusChangedEventFilter;
    ERC1155TokenStatusChanged(
      collection?: null,
      tokenId?: null,
      status?: null
    ): ERC1155TokenStatusChangedEventFilter;

    "ERC721CollectionStatusChanged(address,uint256)"(
      collection?: null,
      minimalVersion?: null
    ): ERC721CollectionStatusChangedEventFilter;
    ERC721CollectionStatusChanged(
      collection?: null,
      minimalVersion?: null
    ): ERC721CollectionStatusChangedEventFilter;

    "MarketplaceUpdated(address)"(
      marketplace?: null
    ): MarketplaceUpdatedEventFilter;
    MarketplaceUpdated(marketplace?: null): MarketplaceUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PromDaoSet(address)"(newPromDao?: null): PromDaoSetEventFilter;
    PromDaoSet(newPromDao?: null): PromDaoSetEventFilter;

    "ProxyFactoryUpdated(address)"(
      proxyFactory?: null
    ): ProxyFactoryUpdatedEventFilter;
    ProxyFactoryUpdated(proxyFactory?: null): ProxyFactoryUpdatedEventFilter;

    "RoyaltyCollectorUpdated(address)"(
      royaltyCollector?: null
    ): RoyaltyCollectorUpdatedEventFilter;
    RoyaltyCollectorUpdated(
      royaltyCollector?: null
    ): RoyaltyCollectorUpdatedEventFilter;

    "TradeCollectionStatusChanged(address,bool)"(
      collection?: null,
      status?: null
    ): TradeCollectionStatusChangedEventFilter;
    TradeCollectionStatusChanged(
      collection?: null,
      status?: null
    ): TradeCollectionStatusChangedEventFilter;

    "TradeMarketplaceFeeReceivereUpdated(address)"(
      TradeMarketplaceFeeReceivereUpdated?: null
    ): TradeMarketplaceFeeReceivereUpdatedEventFilter;
    TradeMarketplaceFeeReceivereUpdated(
      TradeMarketplaceFeeReceivereUpdated?: null
    ): TradeMarketplaceFeeReceivereUpdatedEventFilter;

    "TradeMarketplaceUpdated(address)"(
      tradeMarketplace?: null
    ): TradeMarketplaceUpdatedEventFilter;
    TradeMarketplaceUpdated(
      tradeMarketplace?: null
    ): TradeMarketplaceUpdatedEventFilter;

    "VaultManagerUpdated(address)"(
      newVaultManager?: null
    ): VaultManagerUpdatedEventFilter;
    VaultManagerUpdated(newVaultManager?: null): VaultManagerUpdatedEventFilter;

    "bundleMarketplaceUpdated(address)"(
      bundleMarketplace?: null
    ): bundleMarketplaceUpdatedEventFilter;
    bundleMarketplaceUpdated(
      bundleMarketplace?: null
    ): bundleMarketplaceUpdatedEventFilter;

    "rentalProposalImplemented(address,address,bool)"(
      collection?: null,
      actionValidator?: null,
      status?: null
    ): rentalProposalImplementedEventFilter;
    rentalProposalImplemented(
      collection?: null,
      actionValidator?: null,
      status?: null
    ): rentalProposalImplementedEventFilter;

    "tradeProposalImplemented(address,bool)"(
      collection?: null,
      status?: null
    ): tradeProposalImplementedEventFilter;
    tradeProposalImplemented(
      collection?: null,
      status?: null
    ): tradeProposalImplementedEventFilter;
  };

  estimateGas: {
    ERC1155CollectionVaultVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ERC721CollectionVaultVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    actionValidator(overrides?: CallOverrides): Promise<BigNumber>;

    bundleMarketplace(overrides?: CallOverrides): Promise<BigNumber>;

    implementedProposalAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isERC1155Enabled(
      _erc1155: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isERC1155TokenDisabled(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTradeCollectionEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketplace(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    promDao(overrides?: CallOverrides): Promise<BigNumber>;

    proxyFactory(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royaltyCollector(overrides?: CallOverrides): Promise<BigNumber>;

    setActionValidator(
      _actionValidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBundleMarketplace(
      _bundleMarketplace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setERC1155CollectionVaultVersion(
      _erc1155: PromiseOrValue<string>,
      _minimalVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setERC721CollectionVaultVersion(
      _erc721: PromiseOrValue<string>,
      _minimalVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsERC1155TokenDisabled(
      _erc1155: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsTradeCollectionEnabled(
      _collectionAddress: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketplace(
      _newMarketplace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPromDao(
      _newPromDao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProposedRentalCollection(
      _rentalCollection: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProposedTradeCollection(
      _tradeCollection: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProxyFactory(
      _newProxyFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoyaltyCollector(
      _newRoyaltyCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTokenOracle(
      _token: PromiseOrValue<string>,
      _oracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTradeMarketplace(
      _tradeMarketplace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTradeMarketplaceFeeReceiver(
      _tradeMarketplaceFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVaultManager(
      _newVaultManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenOracle(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeMarketplace(overrides?: CallOverrides): Promise<BigNumber>;

    tradeMarketplaceFeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vaultManager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC1155CollectionVaultVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC721CollectionVaultVersion(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    actionValidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bundleMarketplace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    implementedProposalAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isERC1155Enabled(
      _erc1155: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isERC1155TokenDisabled(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTradeCollectionEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketplace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    promDao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royaltyCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setActionValidator(
      _actionValidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBundleMarketplace(
      _bundleMarketplace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setERC1155CollectionVaultVersion(
      _erc1155: PromiseOrValue<string>,
      _minimalVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setERC721CollectionVaultVersion(
      _erc721: PromiseOrValue<string>,
      _minimalVersion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsERC1155TokenDisabled(
      _erc1155: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsTradeCollectionEnabled(
      _collectionAddress: PromiseOrValue<string>,
      _status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketplace(
      _newMarketplace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPromDao(
      _newPromDao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProposedRentalCollection(
      _rentalCollection: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProposedTradeCollection(
      _tradeCollection: PromiseOrValue<string>,
      _isEnabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProxyFactory(
      _newProxyFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltyCollector(
      _newRoyaltyCollector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTokenOracle(
      _token: PromiseOrValue<string>,
      _oracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTradeMarketplace(
      _tradeMarketplace: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTradeMarketplaceFeeReceiver(
      _tradeMarketplaceFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVaultManager(
      _newVaultManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenOracle(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradeMarketplace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradeMarketplaceFeeReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vaultManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
