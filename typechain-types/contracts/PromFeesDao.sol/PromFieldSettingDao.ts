/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface PromFieldSettingDaoInterface extends utils.Interface {
  functions: {
    "addressRegistry()": FunctionFragment;
    "cleanse(address,uint256,uint256)": FunctionFragment;
    "cleanseAll(address,uint256)": FunctionFragment;
    "createFeeUpdateProposal(address,uint16)": FunctionFragment;
    "currentProposalIndex()": FunctionFragment;
    "downvote(uint256)": FunctionFragment;
    "getAllParticipatedProposalsByUser()": FunctionFragment;
    "getOngoingProposals()": FunctionFragment;
    "implementProposal(uint256)": FunctionFragment;
    "proposal(uint256)": FunctionFragment;
    "proposalDownvotesByUser(address,uint256)": FunctionFragment;
    "proposalUpvotesByUser(address,uint256)": FunctionFragment;
    "upvote(uint256)": FunctionFragment;
    "votesThreshold()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addressRegistry"
      | "cleanse"
      | "cleanseAll"
      | "createFeeUpdateProposal"
      | "currentProposalIndex"
      | "downvote"
      | "getAllParticipatedProposalsByUser"
      | "getOngoingProposals"
      | "implementProposal"
      | "proposal"
      | "proposalDownvotesByUser"
      | "proposalUpvotesByUser"
      | "upvote"
      | "votesThreshold"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addressRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cleanse",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cleanseAll",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createFeeUpdateProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentProposalIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "downvote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllParticipatedProposalsByUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOngoingProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalDownvotesByUser",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalUpvotesByUser",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "upvote",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "votesThreshold",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addressRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cleanse", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cleanseAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createFeeUpdateProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentProposalIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "downvote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllParticipatedProposalsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOngoingProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalDownvotesByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalUpvotesByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upvote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votesThreshold",
    data: BytesLike
  ): Result;

  events: {
    "FeeProposalImplemented(uint256,address,uint16,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeProposalImplemented"): EventFragment;
}

export interface FeeProposalImplementedEventObject {
  proposalIndex: BigNumber;
  targetCollection: string;
  targetFee: number;
  proposalCreator: string;
  upvotes: BigNumber;
  downvotes: BigNumber;
  threshold: BigNumber;
}
export type FeeProposalImplementedEvent = TypedEvent<
  [BigNumber, string, number, string, BigNumber, BigNumber, BigNumber],
  FeeProposalImplementedEventObject
>;

export type FeeProposalImplementedEventFilter =
  TypedEventFilter<FeeProposalImplementedEvent>;

export interface PromFieldSettingDao extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PromFieldSettingDaoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressRegistry(overrides?: CallOverrides): Promise<[string]>;

    cleanse(
      _voter: PromiseOrValue<string>,
      _proposalIndex: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cleanseAll(
      _voter: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createFeeUpdateProposal(
      _targetCollection: PromiseOrValue<string>,
      _targetPlatformFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentProposalIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    downvote(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllParticipatedProposalsByUser(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { participatedIndexes: BigNumber[] }>;

    getOngoingProposals(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { ongoingProposals: BigNumber[] }>;

    implementProposal(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, number, string, BigNumber, BigNumber] & {
        deadlineTimestamp: BigNumber;
        marketplace: string;
        targetCollection: string;
        targetPlatformFee: number;
        proposalCreator: string;
        upvotes: BigNumber;
        downvotes: BigNumber;
      }
    >;

    proposalDownvotesByUser(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposalUpvotesByUser(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    upvote(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votesThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addressRegistry(overrides?: CallOverrides): Promise<string>;

  cleanse(
    _voter: PromiseOrValue<string>,
    _proposalIndex: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cleanseAll(
    _voter: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createFeeUpdateProposal(
    _targetCollection: PromiseOrValue<string>,
    _targetPlatformFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentProposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

  downvote(
    _proposalIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllParticipatedProposalsByUser(
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getOngoingProposals(overrides?: CallOverrides): Promise<BigNumber[]>;

  implementProposal(
    _proposalIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposal(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, number, string, BigNumber, BigNumber] & {
      deadlineTimestamp: BigNumber;
      marketplace: string;
      targetCollection: string;
      targetPlatformFee: number;
      proposalCreator: string;
      upvotes: BigNumber;
      downvotes: BigNumber;
    }
  >;

  proposalDownvotesByUser(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposalUpvotesByUser(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  upvote(
    _proposalIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votesThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addressRegistry(overrides?: CallOverrides): Promise<string>;

    cleanse(
      _voter: PromiseOrValue<string>,
      _proposalIndex: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cleanseAll(
      _voter: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createFeeUpdateProposal(
      _targetCollection: PromiseOrValue<string>,
      _targetPlatformFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentProposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    downvote(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllParticipatedProposalsByUser(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getOngoingProposals(overrides?: CallOverrides): Promise<BigNumber[]>;

    implementProposal(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, number, string, BigNumber, BigNumber] & {
        deadlineTimestamp: BigNumber;
        marketplace: string;
        targetCollection: string;
        targetPlatformFee: number;
        proposalCreator: string;
        upvotes: BigNumber;
        downvotes: BigNumber;
      }
    >;

    proposalDownvotesByUser(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalUpvotesByUser(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upvote(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    votesThreshold(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "FeeProposalImplemented(uint256,address,uint16,address,uint256,uint256,uint256)"(
      proposalIndex?: null,
      targetCollection?: null,
      targetFee?: null,
      proposalCreator?: null,
      upvotes?: null,
      downvotes?: null,
      threshold?: null
    ): FeeProposalImplementedEventFilter;
    FeeProposalImplemented(
      proposalIndex?: null,
      targetCollection?: null,
      targetFee?: null,
      proposalCreator?: null,
      upvotes?: null,
      downvotes?: null,
      threshold?: null
    ): FeeProposalImplementedEventFilter;
  };

  estimateGas: {
    addressRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    cleanse(
      _voter: PromiseOrValue<string>,
      _proposalIndex: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cleanseAll(
      _voter: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createFeeUpdateProposal(
      _targetCollection: PromiseOrValue<string>,
      _targetPlatformFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentProposalIndex(overrides?: CallOverrides): Promise<BigNumber>;

    downvote(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllParticipatedProposalsByUser(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOngoingProposals(overrides?: CallOverrides): Promise<BigNumber>;

    implementProposal(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalDownvotesByUser(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalUpvotesByUser(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upvote(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votesThreshold(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addressRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cleanse(
      _voter: PromiseOrValue<string>,
      _proposalIndex: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cleanseAll(
      _voter: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createFeeUpdateProposal(
      _targetCollection: PromiseOrValue<string>,
      _targetPlatformFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentProposalIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    downvote(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllParticipatedProposalsByUser(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOngoingProposals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementProposal(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposal(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalDownvotesByUser(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalUpvotesByUser(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upvote(
      _proposalIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votesThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
