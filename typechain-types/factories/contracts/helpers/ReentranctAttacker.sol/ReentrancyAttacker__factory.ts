/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ReentrancyAttacker,
  ReentrancyAttackerInterface,
} from "../../../../contracts/helpers/ReentranctAttacker.sol/ReentrancyAttacker";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract PromDaoGovernanceWrap",
        name: "_wrapContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "approveWrap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "attackCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "simulateUnwrapReentrancyAttack",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "simulateWrapReentrancyAttack",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "wrapContract",
    outputs: [
      {
        internalType: "contract PromDaoGovernanceWrap",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610b57380380610b57833981810160405281019061003291906100ed565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b60006100ba8261009d565b9050919050565b6100ca816100af565b81146100d557600080fd5b50565b6000815190506100e7816100c1565b92915050565b60006020828403121561010357610102610078565b5b6000610111848285016100d8565b91505092915050565b610a2e806101296000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063215e0cca1461005c5780632b9ac97614610078578063407c28211461009457806386e65a07146100b2578063cc1f4818146100ce575b600080fd5b61007660048036038101906100719190610630565b6100ec565b005b610092600480360381019061008d9190610630565b6101dc565b005b61009c61030c565b6040516100a9919061066c565b60405180910390f35b6100cc60048036038101906100c79190610630565b610312565b005b6100d6610468565b6040516100e39190610706565b60405180910390f35b8060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101469190610742565b602060405180830381865afa158015610163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101879190610772565b10156101c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bf906107fc565b60405180910390fd5b60006001819055506101d98161048c565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dde0bc146040518163ffffffff1660e01b8152600401602060405180830381865afa158015610247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026b919061085a565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016102c5929190610887565b6020604051808303816000875af11580156102e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030891906108e8565b5050565b60015481565b8060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dde0bc146040518163ffffffff1660e01b8152600401602060405180830381865afa15801561037e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a2919061085a565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103da9190610742565b602060405180830381865afa1580156103f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041b9190610772565b101561045c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045390610961565b60405180910390fd5b61046581610547565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a600154101561054457600160008154809291906104aa906109b0565b919050555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de0e9a3e826040518263ffffffff1660e01b8152600401610508919061066c565b600060405180830381600087803b15801561052257600080fd5b505af1158015610536573d6000803e3d6000fd5b505050506105438161048c565b5b50565b60005b600a8110156105f15760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ea598cb0836040518263ffffffff1660e01b81526004016105ac919061066c565b600060405180830381600087803b1580156105c657600080fd5b505af11580156105da573d6000803e3d6000fd5b5050505080806105e9906109b0565b91505061054a565b5050565b600080fd5b6000819050919050565b61060d816105fa565b811461061857600080fd5b50565b60008135905061062a81610604565b92915050565b600060208284031215610646576106456105f5565b5b60006106548482850161061b565b91505092915050565b610666816105fa565b82525050565b6000602082019050610681600083018461065d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006106cc6106c76106c284610687565b6106a7565b610687565b9050919050565b60006106de826106b1565b9050919050565b60006106f0826106d3565b9050919050565b610700816106e5565b82525050565b600060208201905061071b60008301846106f7565b92915050565b600061072c82610687565b9050919050565b61073c81610721565b82525050565b60006020820190506107576000830184610733565b92915050565b60008151905061076c81610604565b92915050565b600060208284031215610788576107876105f5565b5b60006107968482850161075d565b91505092915050565b600082825260208201905092915050565b7f4e6f7420656e6f75676820777261707065642050726f6d20746f6b656e730000600082015250565b60006107e6601e8361079f565b91506107f1826107b0565b602082019050919050565b60006020820190508181036000830152610815816107d9565b9050919050565b600061082782610721565b9050919050565b6108378161081c565b811461084257600080fd5b50565b6000815190506108548161082e565b92915050565b6000602082840312156108705761086f6105f5565b5b600061087e84828501610845565b91505092915050565b600060408201905061089c6000830185610733565b6108a9602083018461065d565b9392505050565b60008115159050919050565b6108c5816108b0565b81146108d057600080fd5b50565b6000815190506108e2816108bc565b92915050565b6000602082840312156108fe576108fd6105f5565b5b600061090c848285016108d3565b91505092915050565b7f4e6f7420656e6f7567682050726f6d20746f6b656e7300000000000000000000600082015250565b600061094b60168361079f565b915061095682610915565b602082019050919050565b6000602082019050818103600083015261097a8161093e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109bb826105fa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109ed576109ec610981565b5b60018201905091905056fea26469706673582212200c1bed2f81e3187d93ab192197709b3c4f07462c61a073bf4b9110c23dbbfa8364736f6c63430008130033";

type ReentrancyAttackerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReentrancyAttackerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReentrancyAttacker__factory extends ContractFactory {
  constructor(...args: ReentrancyAttackerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _wrapContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ReentrancyAttacker> {
    return super.deploy(
      _wrapContract,
      overrides || {}
    ) as Promise<ReentrancyAttacker>;
  }
  override getDeployTransaction(
    _wrapContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_wrapContract, overrides || {});
  }
  override attach(address: string): ReentrancyAttacker {
    return super.attach(address) as ReentrancyAttacker;
  }
  override connect(signer: Signer): ReentrancyAttacker__factory {
    return super.connect(signer) as ReentrancyAttacker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReentrancyAttackerInterface {
    return new utils.Interface(_abi) as ReentrancyAttackerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReentrancyAttacker {
    return new Contract(address, _abi, signerOrProvider) as ReentrancyAttacker;
  }
}
