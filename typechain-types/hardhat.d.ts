/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ActionValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ActionValidator__factory>;
    getContractFactory(
      name: "IPrometaAddressRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPrometaAddressRegistry__factory>;
    getContractFactory(
      name: "IVaultManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVaultManager__factory>;
    getContractFactory(
      name: "RestrictedContracts",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RestrictedContracts__factory>;
    getContractFactory(
      name: "AddressRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressRegistry__factory>;
    getContractFactory(
      name: "PromDao",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PromDao__factory>;
    getContractFactory(
      name: "ReentrancyAttacker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyAttacker__factory>;
    getContractFactory(
      name: "TERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TERC20__factory>;
    getContractFactory(
      name: "PromDao",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PromDao__factory>;
    getContractFactory(
      name: "PromDaoGovernanceWrap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PromDaoGovernanceWrap__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ActionValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ActionValidator>;
    getContractAt(
      name: "IPrometaAddressRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPrometaAddressRegistry>;
    getContractAt(
      name: "IVaultManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVaultManager>;
    getContractAt(
      name: "RestrictedContracts",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RestrictedContracts>;
    getContractAt(
      name: "AddressRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressRegistry>;
    getContractAt(
      name: "PromDao",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PromDao>;
    getContractAt(
      name: "ReentrancyAttacker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyAttacker>;
    getContractAt(
      name: "TERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TERC20>;
    getContractAt(
      name: "PromDao",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PromDao>;
    getContractAt(
      name: "PromDaoGovernanceWrap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PromDaoGovernanceWrap>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
